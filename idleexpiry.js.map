{"version":3,"sources":["idleexpiry.ts"],"names":[],"mappings":";;;;;;;;AAGA;IAGE;QACE,IAAI,CAAC,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;IAC5B,CAAC;IAOD,uBAAE,GAAF,UAAG,KAAW;QACZ,EAAE,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;YACrB,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;gBACX,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;YAC3D,CAAC;YAED,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;QACvB,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAaD,wBAAG,GAAH;QACE,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;IACpB,CAAC;IAMD,8BAAS,GAAT;QACE,IAAI,MAAM,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;QACzB,MAAM,CAAC,MAAM,IAAI,IAAI,IAAI,MAAM,IAAI,IAAI,CAAC,GAAG,EAAE,CAAC;IAChD,CAAC;IACH,iBAAC;AAAD,CA/CA,AA+CC,IAAA;AA/CqB,kBAAU,aA+C/B,CAAA","file":"idleexpiry.js","sourcesContent":["/*\n * Represents a base class for types that provide expiry detection for the Idle service.\n */\nexport abstract class IdleExpiry {\n  protected idValue: any;\n\n  constructor() {\n    this.idValue = new Date();\n  }\n\n  /*\n   * Gets or sets a unique ID for the window\n   * @param id - The id.\n   * @return The current id.\n   */\n  id(value?: any): any {\n    if (value !== void 0) {\n      if (!value) {\n        throw new Error('A value must be specified for the ID.');\n      }\n\n      this.idValue = value;\n    }\n\n    return this.idValue;\n  }\n\n  /*\n   * Gets or sets the last expiry date.\n   * @param value - The value to set.\n   * @return The last expiry value.\n   */\n  abstract last(value?: Date): Date;\n\n  /*\n   * Returns the current Date.\n   * @return The current Date.\n   */\n  now(): Date {\n    return new Date();\n  }\n\n  /*\n   * Returns whether or not it is expired.\n   * @return True if expired; otherwise, false.\n   */\n  isExpired(): boolean {\n    let expiry = this.last();\n    return expiry != null && expiry <= this.now();\n  }\n}\n"]}